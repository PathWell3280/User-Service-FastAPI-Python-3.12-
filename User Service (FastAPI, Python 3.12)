import os
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

engine = create_async_engine(DATABASE_URL, future=True)
async_session = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

from sqlalchemy import Column, Integer, String, DateTime, func
from sqlalchemy.orm import declarative_base

Base = declarative_base()

class Profile(Base):
    __tablename__ = "profiles"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    email = Column(String, nullable=False, unique=True, index=True)
    phi_data = Column(String, nullable=False)
    token = Column(String, nullable=False, unique=True, index=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

from pydantic import BaseModel, EmailStr
from datetime import datetime

class ProfileCreate(BaseModel):
    name: str
    email: EmailStr
    phi: str

class ProfileRead(BaseModel):
    id: int
    name: str
    email: EmailStr
    token: str
    created_at: datetime

    class Config:
        orm_mode = True

import os
from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from slowapi.errors import RateLimitExceeded
from slowapi.middleware import SlowAPIMiddleware
from slowapi import _rate_limit_exceeded_handler
from sqlalchemy.ext.asyncio import AsyncSession

from .database import async_session
from .models import Base
from .crud import create_profile, get_profile
from .schemas import ProfileCreate, ProfileRead
from .middleware.rate_limiter import limiter

app = FastAPI(title="Profile Service")
app.add_middleware(SlowAPIMiddleware)
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# CORS (adjust origins as needed)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

async def get_db():
    async with async_session() as session:
        yield session

@app.on_event("startup")
async def on_startup():
    async with async_session() as session:
        # Create tables
        await session.run_sync(Base.metadata.create_all)
        # Enable RLS and minimal policy
        await session.execute("ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;")
        await session.execute(
            """
            CREATE POLICY user_rls_policy ON profiles
            USING (true);
            """
        )
        await session.commit()

@app.post("/profiles", response_model=ProfileRead)
@limiter.limit("5000/minute")
async def api_create_profile(
    payload: ProfileCreate,
    db: AsyncSession = Depends(get_db)
):
    profile = await create_profile(db, payload)
    return profile

@app.get("/profiles/{profile_id}", response_model=ProfileRead)
async def api_get_profile(
    profile_id: int,
    db: AsyncSession = Depends(get_db)
):
    profile = await get_profile(db, profile_id)
    if not profile:
        raise HTTPException(status_code=404, detail="Not found")
    return profile
